> # Load necessary libraries
  > library(recommenderlab)  
Loading required package: Matrix
Loading required package: arules

Attaching package: ‘arules’

The following objects are masked from ‘package:base’:
  
  abbreviate, write

Loading required package: proxy

Attaching package: ‘proxy’

The following object is masked from ‘package:Matrix’:
  
  as.matrix

The following objects are masked from ‘package:stats’:
  
  as.dist, dist

The following object is masked from ‘package:base’:
  
  as.matrix

Registered S3 methods overwritten by 'registry':
  method               from 
print.registry_field proxy
print.registry_entry proxy
Warning message:
  package ‘recommenderlab’ was built under R version 4.4.2 
> library(ggplot2)         
Use suppressPackageStartupMessages() to eliminate package startup messages
Warning message:
  package ‘ggplot2’ was built under R version 4.4.2 
> library(data.table)      
data.table 1.16.0 using 2 threads (see ?getDTthreads).  Latest news: r-datatable.com
> library(reshape2)        

Attaching package: ‘reshape2’

The following objects are masked from ‘package:data.table’:
  
  dcast, melt

> library(dplyr)           

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:
  
  between, first, last

The following objects are masked from ‘package:arules’:
  
  intersect, recode, setdiff, setequal, union

The following objects are masked from ‘package:stats’:
  
  filter, lag

The following objects are masked from ‘package:base’:
  
  intersect, setdiff, setequal, union

Warning message:
  package ‘dplyr’ was built under R version 4.4.2 
> 
  > # Load movie and rating data
  > movie_data <- read.csv("movies.csv", stringsAsFactors = FALSE)
> rating_data <- read.csv("ratings.csv")
> 
  > head(movie_data)
movieId                              title                                      genres
1       1                   Toy Story (1995) Adventure|Animation|Children|Comedy|Fantasy
2       2                     Jumanji (1995)                  Adventure|Children|Fantasy
3       3            Grumpier Old Men (1995)                              Comedy|Romance
4       4           Waiting to Exhale (1995)                        Comedy|Drama|Romance
5       5 Father of the Bride Part II (1995)                                      Comedy
6       6                        Heat (1995)                       Action|Crime|Thriller
> head(rating_data)
userId movieId rating  timestamp
1      1      16    4.0 1217897793
2      1      24    1.5 1217895807
3      1      32    4.0 1217896246
4      1      47    4.0 1217896556
5      1      50    4.0 1217896523
6      1     110    4.0 1217896150
> # Extract genres from movie_data into a data frame
  > movie_genre <- as.data.frame(movie_data$genres, stringsAsFactors = FALSE)
> # Split genres into separate columns using '|' delimiter
  > movie_genre2 <- as.data.frame(tstrsplit(movie_genre[, 1], '[|]', type.convert = TRUE), 
                                  +                               stringsAsFactors = FALSE)
> # Assign column names to the genre matrix
  > colnames(movie_genre2) <- c(1:10)
> 
  > # Defining list of genres
  > list_genre <- c("Action", "Adventure", "Animation", "Children", "Comedy", "Crime", 
                    +                 "Documentary", 
                    +                 "Drama", "Fantasy", "Film-Noir", "Horror", "Musical", "Mystery", 
                    +                 "Romance", 
                    +                 "Sci-Fi", "Thriller", "War", "Western")
> # Initialize genre matrix with zeros
  > genre_mat <- matrix(0, nrow(movie_data), length(list_genre))
> # Assign column names to the genre matrix
  > colnames(genre_mat) <- list_genre
> # Iterate through each movie and its genres
  > for (i in 1:nrow(movie_genre2)) {
    +     for (j in 1:ncol(movie_genre2)) {
      +         # Find the column index for the genre
        +         genre_col <- which(colnames(genre_mat) == movie_genre2[i, j])
        +         # Mark the corresponding genre as 1 in the genre matrix
          +         genre_mat[i, genre_col] <- 1
          +     }
    + }
> # Convert genre matrix to data frame and ensure integer type
  > genre_mat <- as.data.frame(genre_mat, stringsAsFactors = FALSE)
> genre_mat <- sapply(genre_mat, as.integer)
> # Print structure of genre matrix
  > str(genre_mat)
int [1:10329, 1:18] 0 0 0 0 0 1 0 0 1 1 ...
- attr(*, "dimnames")=List of 2
..$ : NULL
..$ : chr [1:18] "Action" "Adventure" "Animation" "Children" ...
> # Combine movie_data, movie_id, and genre information into SearchMatrix
  > SearchMatrix <- cbind(movie_data[, 1:2], genre_mat)
> # Display the first few rows of SearchMatrix
  > head(SearchMatrix)
movieId                              title Action Adventure Animation Children Comedy Crime Documentary Drama Fantasy
1       1                   Toy Story (1995)      0         1         1        1      1     0           0     0       1
2       2                     Jumanji (1995)      0         1         0        1      0     0           0     0       1
3       3            Grumpier Old Men (1995)      0         0         0        0      1     0           0     0       0
4       4           Waiting to Exhale (1995)      0         0         0        0      1     0           0     1       0
5       5 Father of the Bride Part II (1995)      0         0         0        0      1     0           0     0       0
6       6                        Heat (1995)      1         0         0        0      0     1           0     0       0
Film-Noir Horror Musical Mystery Romance Sci-Fi Thriller War Western
1         0      0       0       0       0      0        0   0       0
2         0      0       0       0       0      0        0   0       0
3         0      0       0       0       1      0        0   0       0
4         0      0       0       0       1      0        0   0       0
5         0      0       0       0       0      0        0   0       0
6         0      0       0       0       0      0        1   0       0
ggplot(rating_data, aes(x = rating)) +  
  +     geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +  # Histogram layer
  +     ggtitle("Rating Distribution") +  # Add plot title
  +     xlab("Rating") +  # Label for x-axis
  +     ylab("Count")  # Label for y-axis
# Calculate average rating and count of ratings for each movieId
> top_rated_movies <- rating_data %>%
  +     group_by(movieId) %>%
  +     summarize(avg_rating = mean(rating), count = n()) %>%
  +     # Filter movies with more than 50 ratings
  +     filter(count > 50) %>%
  +     # Arrange movies by average rating in descending order
  +     arrange(desc(avg_rating)) %>%
  +     # Select top 10 movies by average rating
  +     top_n(10, wt = avg_rating)
> 
  > # Merge top_rated_movies with movie_data to get movie titles
  > top_rated_movies <- merge(top_rated_movies, movie_data, by = "movieId")
> 
  > # Create a bar plot of top rated movies
  > ggplot(top_rated_movies, aes(x = reorder(title, avg_rating), y = avg_rating)) +  
  +     geom_bar(stat = "identity", fill = "lightgreen", color = "black") +  
  +     coord_flip() +  # Flip coordinates to make horizontal bar plot
  +     ggtitle("Top 10 Rated Movies") +  # Add plot title
  +     xlab("Movie Title") +  # Label for x-axis
  +     ylab("Average Rating")  # Label for y-axis
> ratingMatrix <- dcast(rating_data, userId ~ movieId, value.var = "rating", na.rm = FALSE)
> ratingMatrix <- as.matrix(ratingMatrix[,-1])
> ratingMatrix <- as(ratingMatrix, "realRatingMatrix")
> ratingMatrix
668 x 10325 rating matrix of class ‘realRatingMatrix’ with 105339 ratings.
# Build Item-Based Collaborative Filtering (IBCF) model using ratingMatrix data
> recommen_model <- Recommender(data = ratingMatrix, method = "IBCF", 
                                +                               parameter = list(k = 30))
> 
  > # Get model information
  > model_info <- getModel(recommen_model)
> 
  > # Display heatmap of similarity matrix for the first 20 rows and columns
  > image(model_info$sim[1:20, 1:20], main = "Heatmap of the first rows and columns")
> # Build IBCF model
  > recommen_model <- Recommender(data = ratingMatrix, method = "IBCF", 
                                  +                               parameter = list(k = 30))
> recommen_model
Recommender of type ‘IBCF’ for ‘realRatingMatrix’ 
learned using 668 users.
> 
  > # Inspect model
  > model_info <- getModel(recommen_model)
> class(model_info$sim)
[1] "dgCMatrix"
attr(,"package")
[1] "Matrix"
> dim(model_info$sim)
[1] 10325 10325
> 
  > # Heatmap of similarities
  > top_items <- 20
> image(model_info$sim[1:top_items, 1:top_items], 
        +       main = "Heatmap of the first rows and columns")
> # Set seed for reproducibility
  > set.seed(123)
> 
  > # Sample data for training and testing
  > sampled_data <- sample(x = c(TRUE, FALSE), size = nrow(ratingMatrix), 
                           +                        replace = TRUE, prob = c(0.8, 0.2))
> 
  > # Split ratingMatrix into training and testing data
  > training_data <- ratingMatrix[sampled_data, ]
> testing_data <- ratingMatrix[!sampled_data, ]
> 
  > # Define the number of top recommendations to predict
  > top_recommendations <- 10 
> 
  > # Predict recommendations for testing data using the recommen_model
  > predicted_recommendations <- predict(object = recommen_model, 
                                         +                                      newdata = testing_data, n = top_recommendations)
> 
  > # Extract recommendations for the first user in the testing set
  > user1_recommendations <- predicted_recommendations@items[[1]]
> user1_movies <- predicted_recommendations@itemLabels[user1_recommendations]
> 
  > # Retrieve movie titles for the recommended movies
  > user1_movie_titles <- sapply(user1_movies, function(x) as.character(subset(movie_data, 
                                                                               +                                                                            movieId == x)$title))
> 
  > # Print recommended movie titles for the first user
  > user1_movie_titles
27 
"Now and Then (1995)" 
72 
"Kicking and Screaming (1995)" 
84 
"Last Summer in the Hamptons (1995)" 
90 
"Journey of August King, The (1995)" 
131 
"Frankie Starlight (1995)" 
271 
"Losing Isaiah (1995)" 
279 
"My Family (1995)" 
309 
"Red Firecracker, Green Firecracker (Pao Da Shuang Deng) (1994)" 
330 
"Tales from the Hood (1995)" 
352 
"Crooklyn (1994)" 
> 
  > # Create an evaluation scheme with given parameters
  > scheme <- evaluationScheme(ratingMatrix, method = "split", train = 0.8, 
                               +                            given = 15, goodRating = 4)
> 
  > # Define the model using the evaluation scheme
  > model <- Recommender(getData(scheme,"train"), method = "IBCF", parameter = list(k = 30))
> 
  > # Predict ratings for known data in the evaluation scheme
  > pred <- predict(model, getData(scheme, "known"), type = "ratings")
> 
  > # Calculate prediction accuracy using unknown data in the scheme
  > error <- calcPredictionAccuracy(pred, getData(scheme, "unknown"))
> 
  > # Print prediction accuracy error
  > error
RMSE      MSE      MAE 
1.497116 2.241355 1.144310 
> num_users <- n_distinct(ratings$userId)
Error: object 'ratings' not found
> num_users <- n_distinct(rating_data$userId)
> 
  > num_users
[1] 668
> num_movies <- n_distinct(rating_data$movieId)
> num_movies
[1] 10325
average_rating_per_movie <- rating_data %>%
  +     group_by(movieId) %>%
  +     summarize(average_rating = mean(rating))
> 
  > ggplot(average_rating_per_movie, aes(x = average_rating)) +
  +     geom_histogram(binwidth = 0.1, fill = "green", color = "black") +
  +     ggtitle("Average Rating per Movie") +
  +     xlab("Average Rating") +
  +     ylab("Count of Movies")
